#+TITLE: Local User Customizations
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit kjhealy
This file contains very local customizations---ones that in some cases
you will not be able to just drop in and use because, e.g., they
involve references to particular files on my own machine. It's
included here for completeness, and as and example of the kind of
things you might put in your own user-specific file.

To use the customizations here yourself, /you must change the name of
 this file to match your own user name or system name/. Those are the
 values of the Emacs variables =user-login-name= or =system-name=, so
 that it will be picked up by =init.el= when Emacs starts up, and get
 loaded properly. To find the current value of these variables on your
 system, launch emacs and do =C-h-v system-name [RET]= or =C-h-v
 user-login-name [RET]=. For example, on my system =user-login-name=
 is 'kjhealy', so this file is named =kjhealy.org=, and when Emacs
 starts up with the starter kit it creates the file =kjhealy.el=.

You will also need to change the values for the location of bibtex
 databases, pandoc and orgmode-mobile specified below, and some other
 settings. *Search for 'kjhealy' in this file* to find the paths that
 need to be updated. Change them as needed or delete them if you don't
 need these features.

Finally, the [[*Local%20Org-mode%20XeLaTeX%20Export%20Settings][Local Org-mode XeLaTeX Export Settings]] section below has
 references to fonts that you may not have available on your
 system. Change the references as appropriate, or comment out or
 delete the lines.

** Local Miscellaneous Settings
*** Color Theme Tweaks
The theme package is loaded in =starter-kit-misc.org=. The settings
here adjust the height of some headings in Org and LaTeX mode, as well
as turning off the sans-serif heading style that AucTeX defaults to.

#+srcname: local-settings
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook
            (lambda ()
              (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
              (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
              (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
              (set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
              (set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
              (set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)))

   (add-hook 'org-mode-hook
             (lambda ()
               (set-face-attribute 'org-level-1 nil :height 1.5)
               (set-face-attribute 'org-level-2 nil :height 1.2)
               (set-face-attribute 'org-level-3 nil :height 1.1)
               (set-face-attribute 'org-level-4 nil :height 1.1)
               (set-face-attribute 'org-level-5 nil :height 1.1)))
#+end_src

*** Run Emacs in Full Screen
  I find it very useful to run Emacs in full-screen mode. There is no
    completely satisfactory way to accomplish this on Mac OS X. What
    works depends on the flavor of emacs you are using,
    unfortunately. Choose as appropriate from the following options. Enable one of them by changing the value of =:tangle= to =yes=.

**** Option 1
Just maximize the frame. Not true fullscreen

#+srcname: fullscreen-1
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c m") 'maximize-frame)
#+end_src

**** Option 2
Fullscreen toggle -- Only works with the (out-of-date)
patched emacs build at =git://github.com/typester/emacs.git=.

#+source: fullscreen-2
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c m") 'ns-toggle-fullscreen)
#+end_src

**** Option 3
Fullscreen toggle using maxframe.el.
#+source: fullscreen-3
#+begin_src emacs-lisp :tangle no

 (require 'maxframe)
 (defvar my-fullscreen-p t "Check if fullscreen is on or off")
 (defun my-toggle-fullscreen ()
 (interactive)
 (setq my-fullscreen-p (not my-fullscreen-p))
 (if my-fullscreen-p
 (restore-frame)
 (maximize-frame)))
 (global-set-key (kbd "C-c f") 'my-toggle-fullscreen)
#+end_src

**** Option 4
For use with Yamamoto Mitsuharu's Carbon-patched Emacs. (This is
    what I use, but it requires you compile a custom version of Emacs provided by Mitsuharu.)

#+source: fullscreen-4
#+begin_src emacs-lisp
    (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))
    (global-set-key (kbd "C-c f") 'fullscreen)
    (add-hook 'after-make-frame-functions 'fullscreen)
#+end_src

*** Mac Key mode
    Used with Mitsuharu Yamamoto's carbon-patched Emacs, which turns
    off support for default mac bindings. Turned off by default.
#+srcname: mac-keys
#+begin_src emacs-lisp :tangle no
   (require 'mac-key-mode)
   (mac-key-mode 1)
   (add-hook 'mac-key-mode-hook
       (lambda()
         (interactive)
         (if mac-key-mode
             (setq mac-option-modifier 'meta)
             (setq mac-option-modifier nil)
             )))
#+end_src

*** Dired-x
Dired extensions
#+source: Dired-x
#+begin_src emacs-lisp
  (load "dired-x")
#+end_src

*** Dired open multiple files
In dired mode, visit all marked files using. Bound to the "F" key.
#+source: dired-F
#+begin_src emacs-lisp
  (eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src

*** Stripe Dired buffers
#+name: stripe-dired
#+begin_src emacs-lisp
(require 'stripe-buffer)
(add-hook 'org-mode-hook 'org-table-stripes-enable)
(add-hook 'dired-mode-hook 'stripe-listify-buffer)
#+end_src

** Local LaTeX settings
*** In-text Smart Quotes (XeLaTeX only)
    Redefine TeX-open-quote and TeX-close-quote to be smart quotes by default. Below, in the local org-mode settings, we'll also map the relevant function to a key we can use in org-mode, too. If you don't use XeLaTeX for processing all your =.tex= files, you should disable this option.

#+source: smart-quotes
#+begin_src emacs-lisp
  (setq TeX-open-quote "“")
  (setq TeX-close-quote "”")
#+end_src

*** SyncTeX, PDF mode, Skim
Set up AUCTeX to work with the Skim PDF viewer.

#+srcname: sync
#+begin_src emacs-lisp
    ;; Synctex with Skim
    (add-hook 'TeX-mode-hook
    (lambda ()
    (add-to-list 'TeX-output-view-style
    '("^pdf$" "."
     "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
     )

  (setq TeX-view-program-selection '((output-pdf "PDF Viewer")))
  (setq TeX-view-program-list
       '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))

  (server-start); start emacs in server mode so that skim can talk to it

    ;; Make emacs aware of multi-file projects
    ;; (setq-default TeX-master nil)

    ;; Auto-raise Emacs on activation (from Skim, usually)
    (defun raise-emacs-on-aqua()
    (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
    (add-hook 'server-switch-hook 'raise-emacs-on-aqua)
#+end_src

*** Local RefTeX Settings
Tell RefTeX where the bibliography files are.

#+srcname: local-reftex
#+begin_src emacs-lisp
    ;; Make RefTex able to find my local bib files
    ;;(setq reftex-bibpath-environment-variables
    ;;'("/Users/kjhealy/Library/texmf/bibtex/bib"))

    ;; Default bibliography
    ;;(setq reftex-default-bibliography
    ;;'("/Users/kjhealy/Documents/bibs/socbib.bib"))


    ;; CDLaTex minor mode: tab-trigger environments, paired paren
    ;; insertion, etc
    ;; (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
    ;; (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
    ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX
    ;;                                         ; mode

    ;; set which characters are autopaired // Doesn't work. Set in custom, below.
    ;; (add-hook 'cdlatex-mode-hook
    ;;   (function (lambda ()
    ;;               (setq cdlatex-paired-parens
    ;;                     '("$[{("))
    ;;             )))
#+end_src

*** Local vc commands
    Run the vc shellscript before running xelatex with C-c c (instead
    of C-c C-c for regular compile). This assumes you're using the VC
    LaTeX package, have vc in your path, and have vc-awk in the
    directory you're working in.

#+srcname: vc-command
#+begin_src emacs-lisp
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run vc alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).

#+source: vc-alone
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v")
                      (lambda ()
                        (interactive)
                        (shell-command "vc")))

#+end_src

** Local Pandoc Support
A pandoc menu for markdown and tex files.
#+src-name: pandoc_mode
#+begin_src emacs-lisp
  (load "pandoc-mode")
  (add-hook 'markdown-mode-hook 'turn-on-pandoc)
  (add-hook 'TeX-mode-hook 'turn-on-pandoc)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src

** Local iBuffer Settings
   Manage a lot of buffers easily with C-x C-b. Already set up
   elsewhere in the starter kit. Add local configuration here, e.g.,
   display categories.
#+srcname: iBuffer-custom
#+begin_src emacs-lisp
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Local Org-mode Settings
*** Smart-quote binding
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default.

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)

  (defun smart-quote-keys ()
    (require 'typopunct)
    (typopunct-change-language 'english)
    (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
    (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark)
    )



#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp
  (setq org-archive-location "~/Dropbox/Org/archive.org::From %s")
#+end_src

*** Mobile Settings
   Sync orgmode files with Dropbox and iPhone.
#+src-name: orgmode-mobile
#+begin_src emacs-lisp
   ;; Set to the location of your Org files on your local system
   (setq org-directory "~/Dropbox/Org")
   ;; Set to <your Dropbox root directory>/MobileOrg.
   (setq org-mobile-directory "~/Dropbox/MobileOrg")
   ;; Set to the files (or directory of files) you want sync'd
   (setq org-agenda-files (quote ("~/Dropbox/Org")))
   ;; Set to the name of the file where new notes will be stored
   (setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")


#+end_src

*** Babel Settings
   Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

#+source: orgmode-indirect-buffer-settings
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using pdflatex or
   xelatex, compiling the bibliography as it goes, with my preferred
   setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   preferences and local configuration.

#+source: orgmode-xelatex-export
#+begin_src emacs-lisp
    (require 'org-latex)
    ;; Choose either listings or minted for exporting source code blocks.
    ;; Using minted (as here) requires pygments be installed. To use the
    ;; default listings package instead, use
    ;; (setq org-export-latex-listings t)
    ;; and change references to "minted" below to "listings"
    (setq org-export-latex-listings 'minted)

    ;; default settings for minted code blocks
    (setq org-export-latex-minted-options
          '(;("frame" "single")
            ("bgcolor" "bg") ; bg will need to be defined in the preamble of your document. It's defined in org-preamble-pdflatex.sty and org-preamble-xelatex.sty below.
            ("fontsize" "\\small")
            ))
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-export-latex-no-toc (depth)
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)

    (add-to-list 'org-export-latex-classes
                 '("memarticle"
                   "\\documentclass[11pt,oneside,article]{memoir}\n\\input{vc} % vc package"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-export-latex-classes
                 '("membook"
                   "\\documentclass[11pt,oneside]{memoir}\n\\input{vc} % vc package"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))

    ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
    ;; but adapted to use latexmk 4.22 or higher.
    (defun my-auto-tex-cmd ()
      "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
      (let ((texcmd)))
      ;; default command: pdflatex
      (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape --' -pdf %f")
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='pdflatex -synctex=1 --shell-escape' -pdf %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex='xelatex -synctex=1 --shell-escape' -pdf %f"))
      ;; LaTeX compilation command
      (setq org-latex-to-pdf-process (list texcmd)))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)

    ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
    (setq org-export-latex-packages-alist
          '(("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" )))

    ;; Custom packages
    (defun my-auto-tex-parameters ()
      "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
      ;; default packages for ordinary latex or pdflatex export
      (setq org-export-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("minted,minion" "org-preamble-pdflatex" t)))
      ;; Packages to include when xelatex is used
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq org-export-latex-default-packages-alist
                '(("minted" "org-preamble-xelatex" t) ))))

    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)
#+end_src

*** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details.
#+source: ebib-setup
#+begin_src emacs-lisp
    (org-add-link-type "ebib" 'ebib)

   (org-add-link-type
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))

   (org-add-link-type
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))

  (org-add-link-type
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))

  (org-add-link-type
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))

  (org-add-link-type
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))
#+end_src

*** HTML export Settings
Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit.

#+source: html-export-settings
#+begin_src emacs-lisp
  (setq org-publish-project-alist
         '(("org"
            :base-directory "~/.emacs.d/"
            :publishing-directory "~/Documents/websites/esk/"
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
            :section-numbers t
            :table-of-contents nil
            :style "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/stylesheets/screen.css\"
                   type=\"text/css\"/>")))

    (setq org-export-html-style-extra "")
    (setq org-export-html-postamble nil)

#+end_src

** IRC
Sometimes useful for getting help on R or Emacs.
#+source: rirc-configuration
#+begin_src emacs-lisp
  ;; connect to irc on invocation but don't autojoin any channels
  (require 'rcirc)
  (add-to-list 'rcirc-server-alist
                       '("irc.freenode.net"))
#+end_src

** Final Custom elements
Some last tweaks.

#+srcname: final-custom
#+begin_src emacs-lisp
  ;; Line-spacing tweak (Optimized for PragmataPro)
  (setq-default line-spacing 5)

  ;; minimize fringe
  (setq-default indicate-empty-lines nil)

  ;; Add keybindings for commenting regions of text
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)

  ;; Base dir
  (cd "~/")

  ;; custom variables kludge. Why can't I get these to work via setq?
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(LaTeX-XeTeX-command "xelatex -synctex=1")
  '(TeX-engine (quote xetex))
  ;; '(TeX-view-program-list (quote (("Skim" "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b"))))
  ;; '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Skim") (output-html "xdg-open"))))
  '(show-paren-mode t)
  '(blink-cursor-mode nil)
  '(text-mode-hook (quote (text-mode-hook-identify)))
  )
#+end_src






* Starter Kit yhe1
** Miscellaneous
*** General settings
#+src-name: Modes at sartup
#+begin_src emacs-lisp
  (setq default-major-mode 'org-mode)
  (setq initial-scratch-message "")
  (setq initial-major-mode 'org-mode)
  (global-auto-revert-mode 1)
  (setq global-auto-revert-non-file-buffers t)
  (global-linum-mode 1)
  (setq kill-ring-max 200)
  (setq user-full-name "Hera Y He")
  (setq user-mail-address "hera.yu.he@gmail.com")
  ;; Abbrev-mode
  (setq default-abbrev-mode t)
  (setq abbrev-file-name             ;; tell emacs where to read abbrev
        "~/.emacs.d/abbrev_defs")    ;; definitions from...
  (setq save-abbrevs t)              ;; save abbrevs when files are saved
  ;; you will be asked before the abbreviations are saved
  (quietly-read-abbrev-file)       ;; reads the abbreviations file on startup
  
  ;; load kbd_macro.el
  ;;(load "~/.emacs.d/kbd_macro.el")
  
  ;;No scroll bar
  (scroll-bar-mode -1)
  
  ;;To make system copy work with Emacs paste and Emacs copy work with
  ;;system paste,
  (setq x-select-enable-clipboard t)
  ;; use setq-default to set it for /all/ modes
  
  (setq split-height-threshold 0)
  (setq split-width-threshold nil)
  
  
  (setq-default mode-line-format
                (list
                 ;; the buffer name; the file name as a tool tip
                 '(:eval (propertize "%b " 'face 'font-lock-keyword-face
                                     'help-echo (buffer-file-name)))
  
                 ;; line and column
                 "(" ;; '%02' to set to 2 chars at least; prevents flickering
                 (propertize "%02l" 'face 'font-lock-type-face) ","
                 (propertize "%02c" 'face 'font-lock-type-face)
                 ") "
  
                 ;; relative position, size of file
                 "["
                 (propertize "%p" 'face 'font-lock-constant-face) ;; % above top
                 "/"
                 (propertize "%I" 'face 'font-lock-constant-face) ;; size
                 "] "
  
                 ;; the current major mode for the buffer.
                 "["
  
                 '(:eval (propertize "%m" 'face 'font-lock-string-face
                                     'help-echo buffer-file-coding-system))
                 "] "
  
  
                 "[" ;; insert vs overwrite mode, input-method in a tooltip
                 '(:eval (propertize (if overwrite-mode "Ovr" "Ins")
                                     'face 'font-lock-preprocessor-face
                                     'help-echo (concat "Buffer is in "
                                                        (if overwrite-mode "overwrite" "insert") " mode")))
  
                 ;; was this buffer modified since the last save?
                 '(:eval (when (buffer-modified-p)
                           (concat ","  (propertize "Mod"
                                                    'face 'font-lock-warning-face
                                                    'help-echo "Buffer has been modified"))))
  
                 ;; is this buffer read-only?
                 '(:eval (when buffer-read-only
                           (concat ","  (propertize "RO"
                                                    'face 'font-lock-type-face
                                                    'help-echo "Buffer is read-only"))))
                 "] "
  
                 ;; add the time, with the date and the emacs uptime in the tooltip
                 '(:eval (propertize (format-time-string "%H:%M")
                                     'help-echo
                                     (concat (format-time-string "%c; ")
                                             (emacs-uptime "Uptime:%hh"))))
                 " --"
                 ;; i don't want to see minor-modes; but if you want, uncomment this:
                 ;; minor-mode-alist  ;; list of minor modes
                 "%-" ;; fill with '-'
                 ))
  
#+end_src

*** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<f5>") 'delete-window)

#+end_src
*** Chinese language related settinng
#+src-name: Chinese related
 #+begin_src emacs-lisp

   ;;Enable ibus when start emacs
                                           ;(require 'ibus)
                                           ;(add-hook 'after-init-hook 'ibus-mode-on)
                                           ;(setq ibus-agent-file-name "~/.emacs.d/src/ibus-el-0.3.2/ibus-el-agent")
                                           ;(global-unset-key (kbd "C-SPC"))
                                           ;(global-set-key (kbd "S-SPC") 'set-mark-command)

                                           ;Recognize chinese sentence end
   (setq sentence-end "\\([。！？]\\|……\\|[.?!][]\"')}]*\\($\\|[ \t]\\)\\)[ \t\n]*")
   (setq sentence-end-double-space nil)

 #+end_src




** Org Mode Settings
*** General settings
#+begin_src emacs-lisp
  (setq default-directory "~/Dropbox/computing/current/")
  ;;Org-auto-mode
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))

      ;;;;orgstruct++-mode is enabled in Gnus message buffers to aid in creating structured email messages.
  ;; (setq org-clock-idle-time 15)
  ;; (add-hook 'message-mode-hook 'orgstruct++-mode 'append)
  ;; (add-hook 'message-mode-hook 'turn-on-auto-fill 'append)
  ;; (add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
  ;; (add-hook 'message-mode-hook 'orgtbl-mode 'append)
  ;; (add-hook 'message-mode-hook 'turn-on-flyspell 'append)
  ;; (add-hook 'message-mode-hook '(lambda () (setq fill-column 72)) 'append)
  ;; (add-hook 'message-mode-hook '(lambda () (local-set-key (kbd "C-c
  ;; M-o") 'org-mime-htmlize)) 'append)



  ;;   ;; Make TAB the yas trigger key in the org-mode-hook and turn on flyspell mode
  ;; (add-hook 'org-mode-hook
  ;;           (lambda ()
  ;;             ;; yasnippet
  ;;             (make-variable-buffer-local 'yas/trigger-key)
  ;;             (org-set-local 'yas/trigger-key [tab])
  ;;             (define-key yas/keymap [tab] 'yas/next-field-group)
  ;;             ;; Undefine C-c [ and C-c ] since this breaks my org-agenda files when directories are include
  ;;             ;; It expands the files in the directories individually
  ;;             (org-defkey org-mode-map "\C-c["    'undefined)
  ;;             (org-defkey org-mode-map "\C-c]"    'undefined)
  ;;             (local-set-key (kbd "C-c M-o") 'bh/mail-subtree)) 'append)


  ;; (defun bh/mail-subtree ()
  ;;   (interactive)
  ;;   (org-mark-subtree)
  ;;   (org-mime-subtree))


  ;;No space between trees
  (add-hook 'org-mode-hook
            (lambda () (setq truncate-lines nil)))

    ;;;No leading stars
  ;;(setq org-hide-leading-stars t)

#+end_src

*** Key bindings
    CLOCK: [2011-08-14 Sun 00:57]--[2011-08-14 Sun 01:00] =>  0:03
#+begin_src emacs-lisp
  ;;Standard key bindings
  (setq org-speed-commands-user (quote (("P" . org-set-property))))
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
  ;;flyspell mode for spell checking everywhere
                                          ;(add-hook 'org-mode-hook 'turn-on-flyspell 'append)
  ;;Custom Key Bindings
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
  (global-set-key (kbd "<f9> c") 'calendar)
  (global-set-key (kbd "<f9> o") 'bh/hide-other)
  (global-set-key (kbd "<f9> s") '(lambda () (interactive) (switch-to-buffer "*scratch*")))
  (global-set-key (kbd "<f9> i") '(lambda () (interactive) (find-file-read-only "~/.emacs.d/yhe1.org")))
  (global-set-key (kbd "<f9> r") '(lambda () (interactive) (find-file-read-only "~/Dropbox/org/notes/reference.org")))
  (global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
  (global-set-key (kbd "<f9> w") 'widen)
  (global-set-key (kbd "C-<f9>") 'winner-undo)
  (global-set-key (kbd "C-<f10>") 'winner-redo)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  (global-set-key (kbd "C-<f11>") 'org-clock-in)
  ;;  (global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
  (global-set-key (kbd "C-M-c") 'org-capture)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-`") 'ido-restrict-to-matches)

  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading)
      (org-shifttab)
      (org-reveal)
      (org-cycle)))

  (defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; now refresh window display (an idiom from simple.el):
    (save-excursion
      (set-window-start (selected-window)
                        (window-start (selected-window)))))

   (defun bh/untabify ()
    (interactive)
    (untabify (point-min) (point-max)))

  (add-hook 'org-mode-hook
                '(lambda ()
                   (local-set-key (kbd "C-c C-v K") 'org-babel-remove-result-in-buffer)
                   (local-set-key (kbd "C-c C-v k") 'org-babel-remove-result)))

  (defun org-babel-remove-result-in-buffer ()
    (interactive)
           (org-babel-map-src-blocks nil (org-babel-remove-result)))
#+end_src

*** Todo settings
#+begin_src emacs-lisp
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "SOMEDAY(S!)" "|" "CANCELLED(c@/!)" "PHONE")
                (sequence "BREAK(b)" "|" "DONE(d!/!)"))))

  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
                ("NEXT" :foreground "blue" :weight bold)
                ("STARTED" :foreground "blue" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("SOMEDAY" :foreground "magenta" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold)
                ("OPEN" :foreground "blue" :weight bold)
                ("CLOSED" :foreground "forest green" :weight bold)
                ("PHONE" :foreground "forest green" :weight bold)
                ("BREAK" :foreground "forest green" :weight bold)
                )))

  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("SOMEDAY" ("WAITING" . t))
                (done ("WAITING"))
                ("TODO" ("WAITING") ("CANCELLED"))
                ("NEXT" ("WAITING"))
                ("STARTED" ("WAITING"))
                ("DONE" ("WAITING") ("CANCELLED")))))


#+end_src

*** Org-capture
#src-name: org-capture
#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/capture.org"))
    (setq org-capture-templates
          '(  ("t" "Todo" entry (file+headline "~/git/org/agenda/capture.org" "Tasks") "* TODO %?\n %i\n %a")
              ("b" "Blog" entry (file+headline "~/git/org/agenda/capture.org" "Blog") "* TODO %?\n %i\n %a")
              ("n" "Note" entry (file+headline "~/git/org/notes/notescapture.org" "Notescapture") "* %? \n%U\n" )
              ("r" "Reference" entry (file+headline "~/git/org/notes/reference.org" "Reference Refile") "* %? \n  " )
              ("j" "Journal" entry (file+headline "~/git/org/agenda/capture.org" "Journal") "* %?\n"  :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/git/org/refile.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n  %i")
              ;;("a" "Archive" entry (file+headline "~/git/org/agenda/capture.org" "Archive") "* %? \n%U\n " )
              ;;("e" "Emacs" entry (file+headline "~/git/org/agenda/capture.org" "Emacs") "* TODO %?\n %i\n %a")
              ;;("g" "Git" entry (file+headline "~/git/org/agenda/capture.org" "Git") "* TODO %?\n %i\n %a")
              ;;("u" "Ubuntu" entry (file+headline "~/git/org/agenda/capture.org" "Ubuntu") "* TODO %?\n %i\n")
              ))

  ;; Remove empty LOGBOOK drawers on clock out
  (defun bh/remove-empty-drawer-on-clock-out ()
    (interactive)
    (save-excursion
      (beginning-of-line 0)
      (org-remove-empty-drawer-at "LOGBOOK" (point))))

  (add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)

#+end_src

#+results:
| bh/remove-empty-drawer-on-clock-out |

*** Org-refile
#+begin_src emacs-lisp
; Targets include this file and any file contributing to the agenda - up to 2 levels deep
(setq org-refile-targets (quote ((nil :maxlevel . 3)
                                 (org-agenda-files :maxlevel . 3))))

; Stop using paths for refile targets - we file directly with IDO
(setq org-refile-use-outline-path nil)

; Targets complete directly with IDO
(setq org-outline-path-complete-in-steps nil)

; Allow refile to create parent tasks with confirmation
(setq org-refile-allow-creating-parent-nodes (quote confirm))

; Use IDO for both buffer and file completion and ido-everywhere to t
(setq org-completion-use-ido t)
(setq ido-everywhere t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))

;Refile settings
; Exclude DONE state tasks from refile targets
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))

(setq org-refile-target-verify-function 'bh/verify-refile-target)

#+end_src





























*** Org-agendas
(setq org-agenda-start-with-follow-mode 1)
*** Org2blog
#+source: Org2blog
    #+begin_src emacs-lisp
    (require 'org2blog-autoloads) (require 'xml-rpc) (setq org2blog/wp-blog-alist '(("regular blog"
    :url "http://njheyu.wordpress.com/xmlrpc.php"
    :username "njheyu"
    :default-title ""
    :default-categories ("Emacs")
    :tags-as-categories nil)
    ("statistics blog"
    :url "http://herahe.wordpress.com/xmlrpc.php"
    :username "njheyu")
    ("testregular blog"
    :url "http://heratest.wordpress.com/xmlrpc.php"
    :username "njheyu")
    ("teststatistics blog"
    :url "http://herastattest.wordpress.com/xmlrpc.php"
    :username "njheyu")
    ))
    (setq org2blog/wp-track-posts nil)

    #+end_src

*** XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using pdflatex or
   xelatex, compiling the bibliography as it goes, with my preferred
   setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   preferences and local configuration.
#+source: my org-export-latex options
#+begin_src emacs-lisp

(require 'tex-site) ;Activate AUCTeX
(setq Tex-auto-save t)
(setq Tex-parse-self t) ;enable document parsing

(add-hook 'LaTeX-mode-hook
          (lambda ()
            (add-to-list 'TeX-command-list '("XeLaTeX" "xelatex -shell-escape %(mode) %t" TeX-run-TeX nil  (latex-mode) ))
            (setq TeX-command-default "XeLaTeX")
            (setq TeX-auto-untabify t     ; remove all tabs before saving
                  TeX-show-compilation t) ; display compilation windows
            (setq TeX-PDF-mode t)       ; PDF mode enable, not plain
            (setq TeX-save-query nil)
            (imenu-add-menubar-index)
            (define-key LaTeX-mode-map (kbd "TAB") 'TeX-complete-symbol)
            (auto-fill-mode 1)
            (reftex-mode 1)
            (latex-math-mode 1)
            (linum-mode 1)
            (setq TeX-DVI-via-PDFTeX t)
            (setq LaTeX-math-abbrev-prefix '";")  ;Set the math mode prefix to
            (setq TeX-electric-escape t))
          )

(add-hook 'LaTeX-mode-hook '(lambda ()
                              (TeX-fold-mode 1)
                              (outline-minor-mode 1)
                              ))

                                        ;Run latexmk with Xelatex
(add-hook 'LaTeX-mode-hook (lambda ()
                             (push
                              '("Latexmk" "latexmk -pdf %s" TeX-run-command nil t
                                :help "Run Latexmk on file")
                              TeX-command-list)))






#+end_src

#+source: orgmode-xelatex-export
#+begin_src emacs-lisp
  (require 'org-latex)
  ;; Choose either listings or minted for exporting source code blocks.
  ;; Using minted (as here) requires pygments be installed. To use the
  ;; default listings package instead, use
  ;; (setq org-export-latex-listings t)
  ;; and change references to "minted" below to "listings"
  (setq org-export-latex-listings 'minted)


  (setq org-export-latex-minted-options
        '(("frame" "none")
          ("fontsize" "\\small")
          ("bgcolor" "bg")
          ("linenos" "")))


  (setq org-export-latex-packages-alist
            '(    ("" "amssymb" t)
                  ("" "amsmath" t)
                  ("" "amsfonts" t)
                  ("" "amsthm" t)
                  ("" "graphicx" t)
                  ("" "longtable" nil)
                  ("" "float" t)
                  ("" "minted" t)
                  ("" "fixltx2e" nil)
                  ("" "wrapfig" nil)
                  ("" "soul" t)
                  ("" "textcomp" t)
                  ("" "marvosym" t)
                  ("" "wasysym" t)
                  ("" "latexsym" t)
                  ("" "hyperref" t)
                  ("" "xcolor" t)
                  ("" "fontspec" t)
                  ))


  (add-to-list 'org-export-latex-classes
                   '("article_en"
                     "\\documentclass[12pt]{article}
  \\usepackage[T1]{fontenc}
  \\usepackage[utf8]{inputenc}
  %\\usepackage[style=authoryear-comp-ajs, abbreviate=true]{biblatex}
     [NO-DEFAULT-PACKAGES]
     [PACKAGES]
     [EXTRA]    "
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (add-to-list 'org-export-latex-classes
                   '("article_cn"
                     "\\documentclass[12pt]{article}
  \\usepackage[boldfont,slantfont]{xeCJK}
  %\\usepackage[style=authoryear-comp-ajs, abbreviate=true]{biblatex}
     [NO-DEFAULT-PACKAGES]
     [PACKAGES]
     [EXTRA]    "
                     ("\\section{%s}" . "\\section*{%s}")
                     ("\\subsection{%s}" . "\\subsection*{%s}")
                     ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                     ("\\paragraph{%s}" . "\\paragraph*{%s}")
                     ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

    (add-to-list 'org-export-latex-classes
                 '("kindle"
                   "\\documentclass[15pt]{article}
      \\usepackage[boldfont,slantfont]{xeCJK}
      %\\usepackage[style=authoryear-comp-ajs, abbreviate=true]{biblatex}
         [NO-DEFAULT-PACKAGES]
         [PACKAGES]
         [EXTRA]    "
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                   ("\\paragraph{%s}" . "\\paragraph*{%s}")
                   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

  (setq org-latex-to-pdf-process
            '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
              "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

#+end_src



*** Org agenda Popup
#+src-name: org agenda popup
#+begin_src emacs-lisp

  ;; Require ubuntu package libnotify-bin
  (defun djcb-popup (title msg &optional icon sound)
    "Show a popup if we're on X, or echo it otherwise; TITLE is the title
  of the message, MSG is the context. Optionally, you can provide an ICON and
  a sound to be played"

    (interactive)
    (when sound (shell-command
                 (concat "mplayer -really-quiet " sound " 2> /dev/null")))
    (if (eq window-system 'x)
        (shell-command (concat "notify-send "

                               (if icon (concat "-i " icon) "")
                               " '" title "' '" msg "'"))
      ;; text only version

      (message (concat title ": " msg))))

  ;; (djcb-popup "Warning" "The end is near"
  ;;             "/usr/share/icons/cab_view.png" "/usr/share/sounds/gnome/default/alerts/glass.ogg")
  ;; the appointment notification facility

  (setq
   appt-message-warning-time 16 ;; warn 15 min in advance

   appt-display-mode-line t     ;; show in the modeline
   appt-display-format 'window) ;; use our func
  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...

  ;; update appt each time agenda opened

  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
  ;;(run-at-time "08:01" 3600 'org-agenda-to-appt)

  ;; our little façade-function for djcb-popup
  (defun djcb-appt-display (min-to-app new-time msg)
    (djcb-popup (format "Appointment in %s minute(s)" min-to-app) msg
                "/usr/share/icons/gnome/32x32/status/appointment-soon.png"
                "/usr/share/sounds/ubuntu/stereo/phone-incoming-call.ogg"))
  (setq appt-disp-window-function (function djcb-appt-display))

  ;;; email notification setup
  ;; (add-hook 'wl-biff-notify-hook
  ;;     (lambda()
  ;;       (djcb-popup "Wanderlust" "You have new mail!"
  ;;         "/usr/share/icons/gnome/32x32/status/mail-unread.png"
  ;;         "/usr/share/sounds/ubuntu/stereo/phone-incoming-call.ogg")))
#+end_src

*** Org Babel
#+begin_src emacs-lisp
  (setq org-babel-default-header-args
        (cons '(:noweb . "yes")
              (assq-delete-all :noweb org-babel-default-header-args)))
#+end_src


#+begin_src emacs-lisp
  ;;; Octave mode setup
  ;; (autoload 'octave-mode "octave-mod" nil t)
  ;; (setq auto-mode-alist
  ;;       (cons '("\\.m$" . octave-mode) auto-mode-alist))
  ;; (add-hook 'octave-mode-hook
  ;;           (lambda ()
  ;;             (abbrev-mode 1)
  ;;             (auto-fill-mode 1)
  ;;             (if (eq window-system 'x)
  ;;                 (font-lock-mode 1))))

  ;; (defun RET-behaves-as-LFD ()
  ;;   (let ((x (key-binding "\C-j")))
  ;;     (local-set-key "\C-m" x)))
  ;; (add-hook 'octave-mode-hook 'RET-behaves-as-LFD)

  ;; (add-hook 'inferior-octave-mode-hook
  ;;           (lambda ()
  ;;             (turn-on-font-lock)
  ;;             (define-key inferior-octave-mode-map [up]
  ;;               'comint-previous-input)
  ;;             (define-key inferior-octave-mode-map [down]
  ;;               'comint-next-input)))

#+end_src

#+begin_src emacs-lisp
  ;;===========================================================================
  ;;      MATLAB
  ;;==============================

  ;; (autoload 'matlab-mode "matlab" "Enter MATLAB mode." t)
  ;; (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
  ;; (autoload 'matlab-shell "matlab" "Interactive MATLAB mode." t)
  ;;
  ;; User Level customizations (You need not use them all):
  ;;   (setq matlab-indent-function t)    ; if you want function bodies indented
  ;;   (setq matlab-verify-on-save-flag nil) ; turn off auto-verify on save
  ;;   (defun my-matlab-mode-hook ()
  ;;     (setq fill-column 76))           ; where auto-fill should wrap
  ;;   (add-hook 'matlab-mode-hook 'my-matlab-mode-hook)
  ;;   (defun my-matlab-shell-mode-hook ()
  ;;      '())
  ;;   (add-hook 'matlab-shell-mode-hook 'my-matlab-shell-mode-hook)
  ;;
  ;; Please read the mode help for matlab-mode for additional
  ;; configuration options.
  ;;
  ;; Syntax highlighting:
  ;;   To get font-lock try adding this for older emacsen:
  ;;     (font-lock-mode 1)
  ;;   Or for newer versions of Emacs:
  ;;     (global-font-lock-mode t)
  ;;   To get hilit19 support try adding:
  ;;     (matlab-mode-hilit)
  ;; =============================================================
  (autoload 'matlab-mode "matlab" "Enter Matlab mode." t)
  (setq auto-mode-alist (cons '("\\.m\\'" . matlab-mode) auto-mode-alist))
  (autoload 'matlab-shell "matlab" "Interactive Matlab mode." t)

  (defun my-matlab-mode-hook ()
    (setq matlab-function-indent t)       ; if you want function bodies indented
    (setq fill-column 76)                 ; where auto-fill should wrap
    (font-lock-mode 1)
    (turn-on-auto-fill)
    )
  (setq matlab-mode-hook 'my-matlab-mode-hook)

  (defun my-matlab-shell-mode-hook ()
    (setq matlab-function-indent t)       ; if you want function bodies indented
    (setq fill-column 76)                 ; where auto-fill should wrap
    (font-lock-mode 1)
    )
  (setq matlab-shell-mode-hook 'my-matlab-shell-mode-hook)


  (custom-set-variables
   '(tab-stop-list (quote (2 4 8 10 12 14 16 18 20 22 24 26 28 30 32))))
  (custom-set-faces
   '(font-lock-warning-face ((((class color) (background light)) (:foreground "darkgreen")))))

  ;;;(load-library "php-mode-102")
  ;;;(add-hook 'php-mode-user-hook 'turn-on-font-lock)



#+end_src
*** Org Latex
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  (setq cdlatex-command-alist '(
  ("eq" "Insert an unnumbered equation"
  "\\[
  ?
  \\]"
  cdlatex-position-cursor nil t nil)
  ("axm" "Insert axiom env"   "" cdlatex-environment ("axm") t nil)
  ("thm" "Insert theorem env" "" cdlatex-environment ("thm") t nil)
  ("lem" "Insert lemma env" "" cdlatex-environment ("lem") t nil)
  ("prp" "Insert proposition env" "" cdlatex-environment ("prop") t nil)
  ("cor" "Insert corollary env" "" cdlatex-environment ("cor") t nil)
  ("defn" "Insert definition env" "" cdlatex-environment ("defn") t nil)
  ("cj" "Insert conjection env" "" cdlatex-environment ("conj") t nil)
  ("eg" "Insert example env" "" cdlatex-environment ("eg") t nil)
  ("prb" "Insert problem env" "" cdlatex-environment ("problem") t nil)
  ("rmk" "Insert remark env" "" cdlatex-environment ("rmk") t nil)
  ("nt" "Insert note env" "" cdlatex-environment ("note") t nil)
  ("case" "Insert case env" "" cdlatex-environment ("case") t nil)
  ("cases" "Insert cases env" "" cdlatex-environment ("cases") t nil)
  ("align" "Insert align env" "" cdlatex-environment ("align") t nil)
  ("verbatim" "Insert verbatim env" "" cdlatex-environment ("verbatim") t nil)
  ("listing" "Insert verbatim env" "" cdlatex-environment ("listing") t nil)
  ("pmatrix" "Insert pmatrix env" "" cdlatex-environment ("pmatrix") t nil)
  ("bmatrix" "Insert bmatrix env" "" cdlatex-environment ("bmatrix") t nil)
  ("Bmatrix" "Insert Bmatrix env" "" cdlatex-environment ("Bmatrix") t nil)
  ("bmatrix" "Insert bmatrix env" "" cdlatex-environment ("bmatrix") t nil)
  ("Vmatrix" "Insert Vmatrix env" "" cdlatex-environment ("Vmatrix") t nil)
  ("matrix" "Insert matrix env" "" cdlatex-environment ("matrix") t nil)
  ))
#+end_src

** ESS Mode settings
#+begin_src emacs-lisp


  (setq ess-source-directory
        (lambda ()
          (concat ess-directory "Src/")))

  (add-hook 'ess-mode-hook
            (lambda ()
              (local-set-key (kbd "C-c d") 'ess-rdired)))


  (add-hook 'inferior-ess-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c d") 'ess-rdired)))

  (add-hook 'ess-transcript-mode-hook
            '(lambda ()
               (local-set-key (kbd "C-c d") 'ess-rdired)))


#+end_src
** Dired Mode settings
#+begin_src emacs-lisp
;;open files with default application
;;https://tor-proxy.net/proxy/express/browse.php?u=http%3A%2F%2Fustunozgur.com%2F%3Fpage%3D6&b=26
(require 'dired)
(define-key dired-mode-map "o" 'dired-launch-command)
(defun dired-launch-command ()
  (interactive)
  (dired-do-shell-command
   (case system-type
     (gnu/linux "gnome-open") ;right for gnome (ubuntu), not for other systems
     (darwin "open"))
   nil
   (dired-get-marked-files t current-prefix-arg)))

#+end_src
